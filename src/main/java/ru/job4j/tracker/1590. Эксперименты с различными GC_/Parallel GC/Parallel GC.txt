Использование ParallelGC:

Ключ запуска: -XX:+UseParallelGC -Xmx12m -Xms12m -Xlog:gc:log.txt

Запуск программы:
19:44
При запуске в heap поступило около 500 Mb объектов, затем произошла малая сборка мусора, 
далее снова наблюдался подъем, и снова – сборка:
p_001.jpg

Количество объектов каждого типа в Sampler при запуске программы:
p_002.jpg

Создание массива на 250 000 элементов:
(19:47)
При этом массив byte[] вырос примерно на размер массива:
p_003.jpg

На графике это отразилось так:
p_004.jpg

Сортировка слиянием.
MergeSort Начало сортировки - 19:49:02.578475200
MergeSort Конец сортировки - 19:49:02.672416100
Сортировка заняла около 10 миллисекунд. 
Сортировка отразилась скачком на диаграмме:
p_005.jpg

Количество объектов в массиве после сортировки и небольшой сборки мусора (19:51:31):
p_006.jpg

Сортировка вставками.
InsertSort Начало сортировки - 19:52:01.729806700
InsertSort Конец сортировки - 19:52:29.754350400
Сортировка длилась около 28 секунд.
После нее прошла еще малая сборка мусора:
p_007.jpg

Сортировка пузырьком:
BubbleSort Начало сортировки - 19:56:08.947036
BubbleSort Конец сортировки - 19:58:29.539339700
Данная сортировка шла дольше всего по времени – 2 минуты 21 секунду.
Отражение сортировки на графике:
p_008.jpg

По окончании запустилась еще одна сборка мусора:
p_009.jpg

Количество объектов в массиве byte[] уменьшилось более чем в 3 раза:
p_010.jpg

Все три сортировки на графиках CPU и Heap:
p_011.jpg

Согласно логу, были только малые сборки мусора, пример:
[1574.268s][info][gc] GC(14) Pause Young (Allocation Failure) 7M->5M(11M) 3.103ms


